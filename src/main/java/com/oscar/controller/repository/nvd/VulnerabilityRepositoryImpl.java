package com.oscar.controller.repository.nvd;

import com.oscar.controller.dto.VulnerabilityRequestDto;
import com.oscar.controller.model.nvd.Vulnerability;
import com.oscar.controller.util.UrlUtil;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;

import java.util.HashSet;
import java.util.Set;

import static org.apache.commons.lang.StringUtils.isNotBlank;

public class VulnerabilityRepositoryImpl implements VulnerabilityRepositoryCustom {

    private final MongoOperations mongoOperations;

    public VulnerabilityRepositoryImpl(MongoOperations mongoOperations) {
        this.mongoOperations = mongoOperations;
    }

    @Override
    public Set<Vulnerability> match(VulnerabilityRequestDto request) {
        Criteria cpeFull = Criteria.where("meta.cpe").regex((request.getVendor() + ":" + request.getName()).toLowerCase());
        Criteria affects = Criteria.where("meta.affects").regex((request.getVendor() + ":" + request.getName()).toLowerCase());

        String regex = "";
        String url = UrlUtil.cleanUrl(request.getUrl()).toLowerCase();
        if (url.length() > 5) {
            regex = regex + url;
        }
        url = UrlUtil.cleanUrl(request.getHomePage()).toLowerCase();
        if (url.length() > 5) {
            regex = regex + "|" + url;
        }

        Query query = new Query();

        if (isNotBlank(regex)) {
            Criteria references = Criteria.where("meta.references").regex(regex);
            query.addCriteria(new Criteria().orOperator(cpeFull, affects, references));
        } else {
            query.addCriteria(new Criteria().orOperator(cpeFull, affects));
        }

        if (request.getSort() != null) {
            query.with(new Sort(request.getSort().getOrder(), request.getSort().getPath()));
        }

        return new HashSet<>(this.mongoOperations.find(query, Vulnerability.class));
    }
}
